// ***************************************************************************************************************
//WEATHERIZE - WHAT'S YOUR WEATHER LIKE
//____________________________________________________
//A project by Roberto Fazio (www.robertofazio.com) 
//in collaboration with Gianluca Macaluso (http://www.deep-bo.com)
//
//Weatherize is a simple data visualization installation that allows an immediate visual representation of meteorological data come from any city. Users can interact choosing by Twitter their favorite cities using the hashtag #wtrz NameCity. In real time, the system returns the representation of weather conditions regarding temperature, humidity and wind speed at that precise moment, which change according to the city selected by the user.
//It 'can' map 'objects or structures that follow the regularity of a grid, using a simple dedicated interface for the Ipad. The patterns generated by triangles create unique colors that vary at every selection of cities in computational way. The vertex of each triangle are anchored to the grid and follow the path with random behavior.
//
//Triangle represents a mysterious basic shape used in symbolic patterns across cultures and times. 
//It shows the four Elements: Earth, Water, Fire and Air also representing the regularity of a stable element and the irregularity of 
//a more elusive and intangible thing.
//The triangle as the time: mysterious, uncertain and uncontrollable.
//This shape is the most important factor in Weatherize, which is able to visualize meteorological data coming from user selected cities.
//The amount of triangles represents local temperature, the color represents weather conditions, 
//the degree of opacity represents the local humidity and the speed of movement represents wind speed.
//The code was entirely written in Processing 1.5.1, an open source programming language. 
//
//It consists of six main parts:
//
//*****************
//-The composition of the grid through keyboard commands or interface IPAD build with TouchOSC. The grid informations are stored into two text edit file, lineV.txt and lineO.txt
//-Receiving data from Twitter. We used the java library for the Twitter API  ( http://twitter4j.org/en/index.html ) . With Twitter4J, you can easily integrate your Java application with the Twitter service. 
//- Detection-time data via RSS feeds from Yahoo (http://developer.yahoo.com/weather/) The Twitter API functionality uses an oAuth system, which allows people to authenticate applications through a login at twitter.com. More info here ( http://blog.blprnt.com/blog/blprnt/updated-quick-tutorial-processing-twitter ) . It's recommended to replace the right authorization codes in order to run correctly weatherize
//-Creation of triangles with different attributes
//-Upload screenshots of the remote server triggered the arrival of a tweet. We used a DataUpload java class developed by Philippe Lhoste  - PhiLho(a)GMX.net ( Weatherize online : www.robertofazio.com/weatherize/online ) 
//-color palette for the moment decided arbitrarily.
//
//*****************
//DOWNLOAD :
//____________________________________________________
//Weatherize is available as source code, and it has been tested on mac and windows 7 
//Source code (git repository) here : https://github.com/robertofazio/Weatherize
//If you don’t like git, you can find a zip file here : https://dl.dropbox.com/u/10907181/weatherize_ver_0502.zip
//
//KEY COMMANDS:
//____________________________________________________
//'i' - show info details
//'f' - fullscreen
//'g' - show / hide grid
//'n' - create horizontal line
//'N' - create vertical line
//'s' - select horizontal line
//'S' - select vertical line
//'r' - delete horizontal line
//'R' - delete vertical line
//'ENTER' - save to txt file the parameters of the grid
//arrow key - move the line
//
//TO DO:
//____________________________________________________
//The development of Weatherize is not yet completed (we're currently in a late Alpha and we'll release a stable Beta a.s.a.p) 
//but have been conceived various possible uses thanks to its adaptability. 
//It could be thought as an interactive projection on a particular object or building or you could create
//an installation in a room that allows the user to enjoy an immersive experience, 
//as if he were in the city he has chosen. After this experience, user can be gifted with a printed postcard, his unique personal "weatherize".
//
//CONTACT:
//____________________________________________________
//write us to studio@robertofazio.com
//www.robertofazio.com
// ****************************************************************************************************************

//libraries
import javax.imageio.*;
import javax.imageio.stream.*;
import java.awt.image.BufferedImage;

import ddf.minim.*;

import oscP5.*;
import fullscreen.*; 
SoftFullScreen fs;
// variabili grafiche
ArrayList trgs = new ArrayList();
float defaultLoc = 100;
Griglia gr;
boolean toggleGrid = false;
Palettes colorContainer = new Palettes();
color[] palette;
int numTriz;
int maxTriz = 25;
PFont font, fontH, fontB;

// variabili twitter stream
ConfigurationBuilder cb;
Twitter twitter;
TwitterStream twitterStream;
String user = "testStudioLab";

// variabili OSC 
OscP5 oscP5;
int receiveAtPort, sendToPort;
String host, oscP5event;

// variabili per il parsing meteo
int temp, humidity, code, temp_h;
String country, meteo, ora, temp_newora, local_time, weather_img;
String city = "Verona";
String data;
String newora;
String wt_img = "http://l.yimg.com/a/i/us/nws/weather/gr/" ;
float visibility, speed;
PImage img_url;
PImage sfondo;

// variabili per il salvataggio remoto
String currentFormat = "png";

// variabili interfaccia
boolean toggleInfos = true;
//boolean toggleFeedback = false;
// String msg = city;

// variabili audio
Minim minim;
AudioPlayer player;

void setup()
{
  size(1280, 1024);
  fs = new SoftFullScreen(this); 
// fs.enter(); 
  font = loadFont("Georgia-Italic-14.vlw");
  fontH = loadFont("Georgia-BoldItalic-24.vlw");
  fontB = loadFont("Georgia-BoldItalic-38.vlw");
//  sfondo = loadImage("sfondo_DEF_1280_1024.jpg");
  
  minim = new Minim(this);
  audio();

  // primo init location e condizioni meteo
  parseCity(city);

  // determino il numero dei triangoli in base alla temperatura della città di partenza
  numTriz = int(map(temp, -5, 40, 1, maxTriz));
  println (numTriz);

  // OSC 
  initOsc();
  // creo la griglia per il posizionamento degli incroci
  gr = new Griglia(1);
  gr.loadGrid();

  // creo ed inizializzo i triangoli
  palette = colorContainer.getPalette(int(newora));
  for (int i = 0; i<numTriz; i++)
  {
    int randomcol = int (random(0, palette.length - 1));
    color c = palette[randomcol];
    Tri tr = new Tri(gr.getCrosses(), speed, c);
    //trgs.add(new Tri(gr.getCrosses(), speed, c));
    tr.init();
    trgs.add(tr);
  }

  // ********************************************************************************************************************************************************************
  // TWITTER JAVA LIBRARY

  //Credentials - register your app as developer and use your OAuth Key https://dev.twitter.com/
  cb = new ConfigurationBuilder();
  cb.setOAuthConsumerKey("*********************");
  cb.setOAuthConsumerSecret("*********************");
  cb.setOAuthAccessToken("*********************");
  cb.setOAuthAccessTokenSecret("*********************");

  StatusListener listener = new StatusListener()
  {
    public void onStatus(Status status) 
    {
      user = status.getUser().getScreenName();
      cambio();

      String citta = status.getText().substring(6);
      String cityName = citta.replace(" ", "");
      for (int j=0; j<trgs.size(); j++)
      {
        Tri tr = (Tri) trgs.get(j);
        tr.fadeOut();
      }
      parseCity(cityName);

      // codice per l'upload della screenshot su server remoto triggerato dall'arrivo di un tweet
      //*****************************************
      DataUpload du = new DataUpload();
      boolean bOK = false;
       noLoop();
      // Upload the currently displayed image with a fixed name, and the chosen format
      if (currentFormat.equals("png"))
      {
        bOK = du.UploadImage(city +"-" + user +"." + currentFormat, (BufferedImage) g.image);
       
      }
      else
      {  
        // We need a new buffered image without the alpha channel
        BufferedImage imageNoAlpha = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        loadPixels();
        imageNoAlpha.setRGB(0, 0, width, height, g.pixels, 0, width);
        bOK = du.UploadImage("snapshot." + currentFormat, imageNoAlpha);
      }
      loop();
      if (!bOK)
        return; // Some problem on Java side. Do nothing

      // Get the answer of the PHP script
      int rc = du.GetResponseCode();
      String feedback = du.GetServerFeedback();
      //println("----- " + rc + " -----\n" + feedback + "---------------");

      // Extract the URL of the image from the PHP feedback
      // I use the hard way, the script could just answer the right URL...
      String[] m = match(feedback, "<img src='([^']+)'");
      if (m != null)  // Found!
      {
        //println("\n=> " + m[0] + "\n");
        // Open in a popup window
        link(m[0], "UploadedImage");
      }

      //*****************************************
    }

    public void onDeletionNotice(StatusDeletionNotice statusDeletionNotice) 
    {
      println("on del error");
    }
    public void onTrackLimitationNotice(int numberOfLimitedStatuses) 
    {
      println("on limit error");
    }
    public void onScrubGeo(long lat, long lon) 
    {
      println(lat+"/"+lon);
    }
    public void onException(Exception ex) 
    {
      ex.printStackTrace();
    }
  };

  //Make the twitter object and prepare the query
  twitterStream = new TwitterStreamFactory(cb.build()).getInstance();
  twitterStream.addListener(listener);
  String keywords[] = 
  {
    "#wtrz ", "#wtrz-", "#wtrz_"
  };
  FilterQuery f = new FilterQuery();
  f.track(keywords);

  twitterStream.filter(f);

  // END TWITTER************************************************************************************************************************************************************
}

void draw()
{
  background(0);
 // image(sfondo,0,0);
  smooth();
  // ciclo tra i triangoli e chiamo il metodo che li anima
  for (int j=0; j<trgs.size(); j++)
  {
    Tri tr = (Tri) trgs.get(j);
    tr.display();
  }

  // se la griglia è visibile la disegno
  if (toggleGrid)
  {
    gr.update();
    gr.display();
  }

  // se la legenda è visibile la disegno
  if (toggleInfos)
  {
    visualizeInfos();
  }
  else
  {
    visualizeFeedback();
  }
}

// FUNZIONI************************************************************************************************************************************************************
void parseCity(String cn)
{
  try
  {
    String temp_address = "http://where.yahooapis.com/v1/places.q('"+cn+"')?appid=19dc3e521f7bc186bc8b53f241c07c86c39c6bac";
    XMLElement places = new XMLElement(this, temp_address);
    XMLElement wNode = places.getChild("place/woeid");
    String w = wNode.getContent();
    parseConditions(w);
  }
  catch(Exception e)
  {
  //  msg = "ops! Something went wrong. Try again!";
    toggleInfos = !toggleInfos;
    ////audio
    bianco();
    for (int i=0; i<trgs.size(); i++)
    { 
      Tri tr = (Tri) trgs.get(i);
      color c = color(255, 255, 255, 50);
      tr.setCol(c);
      tr.fadeIn();
    }
  }
}

void parseConditions(String wID)
{
  try
  {
    String url = "http://weather.yahooapis.com/forecastrss?w="+wID+"&u=c";
    XMLElement rss = new XMLElement(this, url);
    XMLElement location = rss.getChild("channel/yweather:location");
    city = location.getString("city");
    country = location.getString("country");
    XMLElement condition = rss.getChild("channel/item/yweather:condition");
    temp = condition.getInt("temp");
    meteo = condition.getString("text");
    code = condition.getInt("code");
    // weather Icons
    String weather_img = wt_img + code +"d.png";
    img_url = loadImage(weather_img);

    data = condition.getString("date");
    XMLElement wind = rss.getChild("channel/yweather:wind");
    speed = wind.getFloat("speed");
    XMLElement atm = rss.getChild("channel/yweather:atmosphere");
    humidity = atm.getInt("humidity");
    visibility = atm.getFloat("visibility");

    local_time = data.substring(16, 25);

    // check se ora ha 2 cifre
    temp_h = data.indexOf(":");
    temp_newora = data.substring(temp_h-2, temp_h);
    if ( temp_newora.charAt(0) == ' ')
    { 
      newora = ""+temp_newora.charAt(1);
    }
    else 
    {  
      newora = temp_newora;
    }

    palette = colorContainer.getPalette(int(newora));
    
    if (toggleInfos == false)
      {
        toggleInfos = true;
      }

    numTriz = int(map(temp, -5, 40, 1, maxTriz));
    int diff;
    if (numTriz < trgs.size())
    {
      println ("minore");
      diff = trgs.size()-numTriz;
      for (int i = 0; i<diff; i++)
      {
        trgs.remove(i);
      }
    }
    else if (numTriz == trgs.size())
    {
      println ("uguali");
    }
    else
    {
      println ("maggiore");
      diff = numTriz-trgs.size();
      for (int i = 0; i<diff; i++)
      { 
        Tri tr = new Tri(gr.getCrosses(), speed, color(0,0,0,0));
        tr.init();
        trgs.add(tr);
      }
    }

    for (int i=0; i<trgs.size(); i++)
    {
      Tri tr = (Tri) trgs.get(i);
      int randomcol = int (random(0, palette.length - 1));
      color c = palette[randomcol];
      tr.setCol(c);
      tr.setEase(speed);
      tr.fadeIn();
    }
  }
  catch(Exception e)
  {
    toggleInfos = !toggleInfos;
    //audio
    rosso();
    for (int i=0; i<trgs.size(); i++)
    {
      Tri tr = (Tri) trgs.get(i);
      color c = color(255, 0, 0, 50);
      tr.setCol(c);
      tr.fadeIn();
    }
  }
}

// *************** AUDIO ***************************************************************************************************************
void audio() {
  player = minim.loadFile("bin.mp3", 2048);
  player.play();
  player.loop();
}

void cambio() {
  player = minim.loadFile("cambio.wav", 2048);
  player.play();
}

void rosso() {
  player = minim.loadFile("rosso.wav", 2048);
  player.play();
}
void bianco() {
  player = minim.loadFile("bianco.wav", 2048);
  player.play();
}

void stop()
{
  player.close();
  minim.stop();
  super.stop();
}

// *************** END AUDIO ***************************************************************************************************************
// **************************** START INTERFACCIA ****************************************************************************************************************

void visualizeFeedback() {

  fill(0, 0, 0, 160);
  noStroke();
  //rect(0, 0, 1280, 70);
  //fill(255);
  textFont(fontH);
//  text(msg, 10, 40);
}

void visualizeInfos() {

  fill(0, 0, 0, 160);
  noStroke();
  rect(0, 0, 1280, 70);
  fill(255);
 // text("FPS  ", 10, 750);
  //text(frameRate, 35, 750);

  fill(255);
  textFont(fontH);
  text(city, 10, 40);
  text(""+user, 410, 40 );
  text(local_time, 600, 40);
  text(temp+"°C", 340, 40);

  text(humidity, 750, 40); 

  float croci;
  croci =  map(speed, 0, 40, 0, 10);
  for (float i=0; i<croci; i+=1) 
  { 
    text("+", 870+i*10, 65);
  }
  text(speed, 860, 40);

  //text("Condizioni Meteo: "+meteo+" ID:"+code, 24, 62);

  textFont(font);
  text(country, 10, 18);
  text(data, 10, 55);
  text(meteo, 240, 18 );
  //text("Temp", 340, 18);
  text("Twitter User: ", 410, 18 );
  text("Local Time: ", 610, 18);
  text("Humidity: ", 750, 18); 
  text("%", 780, 40);
  text("Wind speed: ", 870, 18); 
  text("km/h", 955, 40);
  //Immagine Weather Icons
  image(img_url, 240, 20, 100, 65);
  int randomcol = int (random(0, palette.length - 1));
  color c = palette[0];
  fill(c);
  rect(610, 50, 15, 15);
  fill(palette[1]);
  rect(625, 50, 15, 15);
  fill(palette[2]);
  rect(640, 50, 15, 15);
  fill(palette[3]);
  rect(655, 50, 15, 15);
  fill(palette[4]);
  rect(670, 50, 15, 15);

  //humidity
  float hum;
  hum = map(humidity, 0, 100, 0, 255);
  fill(hum, humidity);
  for (float i=0; i<humidity; i+=1)
  {
    rect(750, 50, 10+i, 15);
  }
}

// **************************** END INTERFACCIA ****************************************************************************************************************

void keyPressed()
{
  if (key == 'n') 
  {
    gr.creaLineaOrz(defaultLoc);
  }
  if (key == 'N') 
  {
    gr.creaLineaVrt(defaultLoc);
  }
  if (keyCode == UP)
  {
    gr.moveLineaOrz("up");
  }
  if (keyCode == DOWN)
  {
    gr.moveLineaOrz("down");
  }
  if (keyCode == LEFT)
  {
    gr.moveLineaVert("left");
  }
  if (keyCode == RIGHT)
  {
    gr.moveLineaVert("right");
  }
  if (key == 's') 
  {
    gr.selLineaOrz();
  }
  if (key == 'S') 
  {
    gr.selLineaVrt();
  }
  if (key == 'r') 
  {
    gr.cancLineaOrz();
  }
  if (key == 'R') 
  {
    gr.cancLineaVrt();
  }
  if (keyCode == ENTER) 
  {
    gr.saveCrosses();
    gr.saveFiles();
  }

  if (key == 'g')
  {
    toggleGrid = !toggleGrid;
  }
  if (key == 'i')
  {
    toggleInfos = !toggleInfos;
  }
}


// *************** START OSC ***************************************************************************************************************

void initOsc() {

  receiveAtPort = 12000;
  sendToPort = 10000;
  host = "localhost";

  oscP5event = "oscEvent";
  oscP5 = new OscP5( this, host, sendToPort, receiveAtPort, oscP5event);
}

public void oscEvent(OscIn oscIn) {     

  if (oscIn.addrPattern().equals("/1/push1")) {

    gr.moveLineaOrz("up");

    // println("fader5 "+oscIn.getFloat(0));
    // println("SLIDER 4 : " +oscIn.addrPattern());
  } 

  if (oscIn.addrPattern().equals("/1/push3")) {

    gr.moveLineaOrz("down");
    //  println("rotary2 "+oscIn.getFloat(0));
  }

  if (oscIn.addrPattern().equals("/1/push5")) {

    gr.moveLineaVert("left");
    // println("multifader1/5 "+oscIn.getFloat(0));
    // println("BUTTON 0 è " +oscIn.addrPattern());
  }

  if (oscIn.addrPattern().equals("/1/push4")) {

    gr.moveLineaVert("right");
  }
  if (oscIn.addrPattern().equals("/1/push7")) {

    gr.creaLineaOrz(defaultLoc);
  }

  if (oscIn.addrPattern().equals("/1/push6")) {

    gr.creaLineaVrt(defaultLoc);
  }

  if (oscIn.addrPattern().equals("/1/push9")) {

    gr.selLineaOrz();
    
    println("select ORZ"+oscIn.getFloat(0));
        

  }

  if (oscIn.addrPattern().equals("/1/push8")) {

    gr.selLineaVrt();
  }

  if (oscIn.addrPattern().equals("/1/push11")) {

    gr.cancLineaOrz();
  }

  if (oscIn.addrPattern().equals("/1/push10")) {

    gr.cancLineaVrt();
  }
  if (oscIn.addrPattern().equals("/1/toggle2")) {

    toggleGrid = !toggleGrid;
    println("Active Grid "+oscIn.getFloat(0));
    
    
  }

  if (oscIn.addrPattern().equals("/1/toggle3")) {
    toggleInfos = !toggleInfos;
  }

  if (oscIn.addrPattern().equals("/1/push12")) {
    gr.saveCrosses();
    gr.saveFiles();
  }
}

// *************** END OSC ***************************************************************************************************************

